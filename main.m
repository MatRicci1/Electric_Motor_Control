clc 
close all
%clear all

%% Parameters
np = 4;                 % Number of pairs of poles
wv = 220;               % Pulse of the voltages (rad/s)
E = 400;                % DC supply voltage (V)
Rs = 0.18;              % Resistance stator seen in Park (Ω)
Ld = 1.15*10^-03;       % Direct Park stator inductance (mH)
Lq = 3.31*10^-03;       % Quadratic Park Stator Inductance (mH)
k = 0;                  % Viscous coefficient of friction
J = 800*10^-6;          % Inertia (m^4)
phim = 200*10^-3;       % Flow of magnets (mWb)
tp = 100*10^-6;         % Cutting period tp (μs)
div = 200;              % Sampling size of each tp

%% Declaration of time and steps

% Initial parameters 
Te = 0.35;              % Total time of simulation (s)
ht = 0.0001;            % Time step (s)
t = 0:ht:Te-ht;
nht = ht/div;
nt = 0:nht:Te-nht;

% Time scale for plots
temp1 = (nt >= 0 & nt < 2*tp);
temp2 = (t >= tp & t < 2*tp);
temp3 = (t >= 0 & t < 20*10^-3);
temp4 = (nt >= 0 & nt < 20*10^-3);
temp5 = (nt >= 0 & nt < 7*10^-3);
temp6 = (t >= 5*10^-4 & t < 15*10^-4);
temp7 = (t >= 0 & t < 10*10^-4);
temp8 = (t >= 0 & t < 7*10^-3);

% Time vector for simulation 
vec = 0:nht:((nht*div)-nht);
tint = repmat(vec,1,length(t));

%% Torque regulation RC
RC = 0*t;
RC(6:15) = (50/(10^-3))*t(1:10);
RC(16:71) = 50;

%% Declaration of empty vectors

% Command measurements
v01 = zeros(1,length(tint));        % Input voltage phase 1 
v02 = zeros(1,length(tint));        % Input voltage phase 2
v03 = zeros(1,length(tint));        % Input voltage phase 1
I1 = zeros(1,length(tint));         % Output current phase 1 
I2 = zeros(1,length(tint));         % Output current phase 2 
I3 = zeros(1,length(tint));         % Output current phase 3 

vd = zeros(1,length(tint));         % Direct voltage 
vq = zeros(1,length(tint));         % Quadratic voltage
Id = zeros(1,length(tint));         % Direct current
Iq = zeros(1,length(tint));         % Quadratic current
Pe =  zeros(1,length(tint));        % Motor Power

phid = zeros(1,length(tint));       % Direct flow
phiq = zeros(1,length(tint));       % Quadratic flow
dphid = zeros(1,length(tint));      % Direct flow derivative
dphiq = zeros(1,length(tint));      % Quadratic flow derivative

C = zeros(1,length(tint));          % Torque generated by the motor
Cr = zeros(1,length(tint));         % Resistive torque
Ct = zeros(1,length(tint));         % Output torque

wm = zeros(1,length(tint));         % Mechanical speed
dwm = zeros(1,length(tint));        % Mechanical acceleration 
we = zeros(1,length(tint));         % Electric speed
A = zeros(1,length(tint));          % Electric angle 

% Control measurements
MA = zeros(1,length(t));            % Electric angle 
MWe = zeros(1,length(t));           % Electric speed
MI1 = zeros(1,length(t));           % Current phase 1
MI2 = zeros(1,length(t));           % Current phase 2
MI3 = zeros(1,length(t));           % Current phase 3
MId = zeros(1,length(t));           % Direct current
MIq = zeros(1,length(t));           % Quadratic current
Mphid = zeros(1,length(t));         % Direct flow 
Mphiq = zeros(1,length(t));         % Quadratic flow
Ephid = zeros(1,length(t));         % Direct flow error
Ephiq = zeros(1,length(t));         % Quadratic flow error
Srd = zeros(1,length(t));           % Direct flow control output 
Srq = zeros(1,length(t));           % Quadratic flow control output 
Rvd = zeros(1,length(t));           % Direct voltage
Rvq = zeros(1,length(t));           % Quadratic voltage

% Control outputs
Rv1 = zeros(1,length(t));           % Voltage phase 1 control output 
Rv2 = zeros(1,length(t));           % Voltage phase 2 control output 
Rv3 = zeros(1,length(t));           % Voltage phase 3 control output
Rvn = zeros(1,length(t));           % Neutral voltage
Rv01 = zeros(1,length(t));          % Voltage phase 1 control output with neutral voltage
Rv02 = zeros(1,length(t));          % Voltage phase 2 control output with neutral voltage
Rv03 = zeros(1,length(t));          % Voltage phase 3 control output with neutral voltage

% Time intervals for pwm calculation
tr1 = zeros(1,length(t));           % Instant when the v01 voltage rises
tr2 = zeros(1,length(t));           % Instant when the v02 voltage rises
tr3 = zeros(1,length(t));           % Instant when the v03 voltage rises
tf1 = zeros(1,length(t));           % Instant when the v01 voltage drops
tf2 = zeros(1,length(t));           % Instant when the v02 voltage drops
tf3 = zeros(1,length(t));           % Instant when the v03 voltage drops

%% Control input calculation 

Gp =  5000;                                 % Proportional Gain
Rphid = phim + zeros(1,length(tint));       % Target direct flow
Rphiq = (Lq * RC)/(np * phim);                    % Target quadratic flow

%% Values at initial instant

j = 0;
MWe(1) = 0;
A(1) = 0;
phid(1) = phim;
phiq(1) = 0;
we(1) = 0;
wm(1) = 0;
Id(1) = (phid(1)-phim)/Ld;
Iq(1) = phiq(1)/Lq;
C(1) = np * (phid(1) * Iq(1) - phiq(1) * Id(1));
Cr(1) = k * we(1);
Ct(1) = C(1) - Cr(1);
[I1(1),I2(1),I3(1)] = clarke(Id(1),Iq(1),A(1));

%% Loop for calculating system variables

for i=1:(length(tint)-1)
    
    % Control calculations at each tp 
    if(mod(i-1,div)==0)
      j = j + 1;
      MA(j) = A(i);  
      if (j>1)
        MWe(j) = (MA(j) - MA(j-1)) / ht;
      end
      MI1(j) = I1(i);
      MI2(j) = I2(i);
      MI3(j) = I3(i);
      [MId(j),MIq(j)] = park(MI1(j),MI2(j),MI3(j), MA(j));
      Mphiq(j) = MIq(j) * Lq;
      Mphid(j) = MId(j) * Ld + phim;
      Ephiq(j) = Rphiq(j) - Mphiq(j);
      Ephid(j) = Rphid(j) - Mphid(j);
      Srd(j) = Ephid(j) * Gp;
      Srq(j) = Ephiq(j) * Gp;
      Rvq(j) =  Srq(j) + MWe(j) * Mphid(j);
      Rvd(j) =  Srd(j) - MWe(j) * Mphiq(j);
      Pe(j) = (Rvd(j)*Id(i)+Rvq(j)*Iq(i))/10;
    end
    
    % Control outputs
    [Rv1(j),Rv2(j),Rv3(j)] = clarke(Rvd(j),Rvq(j),MA(j));
    Rvn(j) = -(max(max(Rv1(j),Rv2(j)),Rv3(j)) + min(min(Rv1(j),Rv2(j)),Rv3(j)))/2;
    Rv01(j) = Rv1(j) + Rvn(j);
    Rv02(j) = Rv2(j) + Rvn(j);
    Rv03(j) = Rv3(j) + Rvn(j);
    
    % Time intervals for pwm calculation
    tr1(j) = tp * (1 - Rv01(j)/E)/4;
    tf1(j) = tp * (3 + Rv01(j)/E)/4;
    tr2(j) = tp * (1 - Rv02(j)/E)/4;
    tf2(j) = tp * (3 + Rv02(j)/E)/4;
    tr3(j) = tp * (1 - Rv03(j)/E)/4;
    tf3(j) = tp * (3 + Rv03(j)/E)/4;

    % pwm calculation 
    [v01(i)] = Pwm(tint(i), tr1(j), tf1(j), E);
    [v02(i)] = Pwm(tint(i), tr2(j), tf2(j), E);
    [v03(i)] = Pwm(tint(i), tr3(j), tf3(j), E);
    
    % Command calculation
    [vd(i),vq(i)] = park(v01(i),v02(i),v03(i), A(i));
    dphiq(i) = vq(i) - Rs * Iq(i) - we(i) * phid(i);
    dphid(i) = vd(i) - Rs * Id(i) + we(i) * phiq(i);
    dwm(i) = Ct(i)/J;
    wm(i+1) = wm(i) + dwm(i) * nht;
    we(i+1) = np * wm(i+1);
    A(i+1) = A(i) + we(i) * nht;
    [vd(i+1),vq(i+1)] = park (v01(i+1), v02(i+1), v03(i+1), A(i+1));
    phiq(i+1) = phiq(i) + dphiq(i) * nht;
    phid(i+1) = phid(i) + dphid(i) * nht;
    Id(i+1) = (phid(i+1) - phim)/Ld;
    Iq(i+1) = phiq(i+1)/Lq;
    C(i+1) = np * (phid(i+1) * Iq(i+1) - phiq(i+1) * Id(i+1));
    Cr(i+1) = k * we(i+1);
    Ct(i+1) = C(i+1) - Cr(i+1);

    % Current outputs
    [I1(i+1),I2(i+1),I3(i+1)] = clarke(Id(i+1),Iq(i+1),A(i+1));

end

%% Diagrammes

figure (1)
yyaxis left;
plot(nt(1:2*div+1),v01(1:2*div+1)+5,'Color',[0 0.4470 0.7410],'LineStyle','-');
hold on;
plot(nt(1:2*div+1),v02(1:2*div+1),'Color',[0.8500 0.3250 0.0980],'LineStyle','-');
hold on;
plot(nt(1:2*div+1),v03(1:2*div+1)-5,'Color',[0.9290 0.6940 0.1250],'LineStyle','-');
hold on;
ylabel('\bf Tension (V)')
yyaxis right;
plot(nt(1:2*div+1),tint(1:2*div+1),'-k');
hold on;
plot(t(1:3),tr1(1:3),'b-.o')
hold on;
plot(t(1:3),tf1(1:3),'m-.o');
ylabel('\bf Temps (s)')
xlabel('\bf Temps (s)')
xlim([0 2*10^-4])
title('V_{01},V_{02},V_{03} x Temps')
legend('V_{01}+5','V_{02}','V_{03}-5','tint','tr1','tf1');
lgd = legend;
lgd.NumColumns = 2;
legend('Location','best')
saveas(gcf,'Images/v0s.jpg');

plotval(0,t,Rvd,'RV_{d}',Rvq,'RV_{q}', -Rvn,'-RV_{n}',temp3,'\bf Tensions d''entrée dans le PWM','\bf Temps (s)','\bf Tension (V)','Images/Rvd_Rvq.jpg')
plotval(2,nt,phid,'\phi_{d}',phiq,'\phi_{q}',temp4,'Flux (notation de Park) x temps','\bf Temps (s)','\bf Flux (Wb)')
plotval(1,t, Rphid,'Rphi_{d}', Rphiq,'Rphi_{q}', Mphid, 'Mphi_{d}', Mphiq,'Mphi_{q}', temp3,'Flux (notation de Park) x temps','\bf Temps (s)','\bf Flux (Wb)','Images/Phid_Phiq.jpg')
plotval(2,nt,Id,'I_{d}',Iq,'I_{q}',temp4,'Courants (notation de Park) x Temps','\bf Temps (s)','\bf Courant (A)')
plotval(1,t,MId,'MI_{d}',MIq,'MI_{q}',temp3,'Courants (notation de Park) x Temps','\bf Temps (s)','\bf Courant (A)','Images/Id_Iq.jpg')
plotval(2,nt,C,'C (N.m)',we,'w_{e} (rad/s)',A,'A (rad)',temp5,'Grandeurs mécaniques x Temps','\bf Temps (s)','')
plotval(1,t,RC,'RC (N.m)',MWe,'Mw_{e} (rad/s)',MA,'MA (rad)',Pe,'Pe (Watts*10)',temp8,'Grandeurs mécaniques x Temps','\bf Temps (s)','', 'Images/Grand_meca.jpg')
plotval(2,nt,I1,'I_{1}',I2,'I_{2}',I3,'I_{3}',I1+I2+I3,'I_{1}+I_{2}+I_{3}',temp4,'Courants (notation de Clarke) x Temps','\bf Temps (s)','\bf Courant (A)')
plotval(1,t,MI1, 'MI_{1}',MI2,'MI_{2}',MI3, 'MI_{3}',temp3,'Courants (notation de Clarke) x Temps','\bf Temps (s)','\bf Courant (A)','Images/i1_i2_i3.jpg')
plotval(0,t, Rv01,'RV_{01}',Rv02,'RV_{02}',Rv03,'RV_{03}',temp3,'\bf RV_{01},RV_{02},RV_{03} x Temps','\bf Temps (s)','\bf Tension (V)','Images/Rv0s.jpg')
plotval(0,t, Rv1,'RV_{1}',Rv2,'RV_{2}',Rv3,'RV_{3}',-Rvn, '-R_{n}',temp3,'\bf RV_{1},RV_{2},RV_{3},-RV_{N} x Temps','\bf Temps (s)','\bf Tension (V)','Images/Rvn.jpg')
